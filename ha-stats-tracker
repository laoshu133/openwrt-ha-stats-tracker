#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');

// Base configuration
const VERSION = "1.2.0";
const APP_NAME = "HA Stats Tracker";
const CONFIG_FILE = path.join(__dirname, 'settings.json');

// Log function
function log(message, isDebug = false) {
    if (isDebug && !global.DEBUG) {
        return;
    }

    const LOG_PREFIX = `[${APP_NAME}]`;
    const logPriority = isDebug ? 'debug' : 'info';

    // Use logger command to write to system log
    exec(`logger -t "${LOG_PREFIX}" -p daemon.${logPriority} "${message}"`, (error) => {
        if (error) {
            // If writing to system log fails, fallback to console output
            console[logPriority](`${LOG_PREFIX} ${message}`);
        }
    });

    // If debug mode, output to console
    if (isDebug) {
        console.debug(`${LOG_PREFIX} ${message}`);
    }
}

function getConfig(cfgPath = CONFIG_FILE) {
    const config = {
        hass_url: 'http://homeassistant.local:8123',
        hass_token: '',
        update_interval: 60,
        debug: false
    };

    try {
        const configContent = fs.readFileSync(cfgPath, 'utf8');
        const existingConfig = JSON.parse(configContent);

        Object.assign(config, existingConfig);
    }
    catch (error) {
        log(`No existing configuration found, will create a new one.`, true);
    }

    return config;
}

// Get device information
function getDeviceInfo() {
    let name = 'openwrt_unknown_device';
    try {
        name = fs.readFileSync('/proc/sys/kernel/hostname', 'utf8').trim();
    }
    catch (error) {}

    return {
        name: name,
        id: name.toLowerCase().replace(/-/g, '_'),
        manufacturer: 'OpenWrt',
        model: 'OpenWrt'
    }
}

// Get system status
async function getSystemStats() {
    const stats = {};

    // Get temperature
    try {
        const temp = await fs.promises.readFile('/sys/class/thermal/thermal_zone0/temp', 'utf8');
        stats.temperature = parseFloat((parseInt(temp) / 1000).toFixed(3));
    } catch (error) {
        // Skip when temperature reading fails
    }

    // Get load
    try {
        const loadAvg = await fs.promises.readFile('/proc/loadavg', 'utf8');
        const [load1min, load5min, load15min] = loadAvg.split(' ');
        stats.load_1min = parseFloat(load1min);
        stats.load_5min = parseFloat(load5min);
        stats.load_15min = parseFloat(load15min);
    } catch (error) {
        // Skip when load reading fails
    }

    // Get CPU usage
    try {
        const cpuUsage = await new Promise((resolve, reject) => {
            exec('top -bn1 | grep "CPU:"', (error, stdout) => {
                if (error) reject(error);
                const usage = stdout.split('CPU:')[1].split('%')[0].trim();
                resolve(parseFloat(usage));
            });
        });
        stats.cpu_usage = cpuUsage;
    } catch (error) {
        // Skip when CPU usage reading fails
    }

    return stats;
}

// Get unit for status metric
function getUnitForStat(statName) {
    const units = {
        temperature: '°C',
        cpu_usage: '%'
    };
    return units[statName] || '';
}

// Get icon for status metric
function getIconForStat(statName) {
    const icons = {
        temperature: 'mdi:thermometer',
        load_1min: 'mdi:chart-line',
        load_5min: 'mdi:chart-line',
        load_15min: 'mdi:chart-line',
        cpu_usage: 'mdi:cpu-64-bit'
    };
    return icons[statName] || 'mdi:eye';
}

// Send data to Home Assistant
async function sendToHA(entityId, data, config) {
    const url = new URL(`${config.hass_url}/api/states/${entityId}`);

    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${config.hass_token}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        if (!response.ok) {
            throw new Error(`HTTP Error: ${response.status}`);
        }

        return true;
    } catch (error) {
        throw error;
    }
}

// Update version entity
async function updateVersionEntity(deviceInfo, config) {
    const entityId = `sensor.${deviceInfo.id}_stats_tracker_version`;
    const data = {
        state: VERSION,
        attributes: {
            friendly_name: `Openwrt(${deviceInfo.name}) Stats Tracker Version`,
            icon: 'mdi:information'
        }
    };

    try {
        await sendToHA(entityId, data, config);
        log('Version entity updated successfully', true);
        return true;
    } catch (error) {
        log('Failed to update version entity');
        return false;
    }
}

// Send system status to Home Assistant
async function sendSystemStats(deviceInfo, stats, config) {
    let hasError = false;

    for (const [statName, value] of Object.entries(stats)) {
        const entityId = `sensor.${deviceInfo.id}_${statName}`;

        // Create more friendly display names
        const statDisplayNames = {
            temperature: 'Temperature',
            load_1min: '1 Minute Load',
            load_5min: '5 Minutes Load',
            load_15min: '15 Minutes Load',
            cpu_usage: 'CPU Usage'
        };

        const uniqueId = `${deviceInfo.id}_${statName}`;
        const displayStatName = statDisplayNames[statName] || statName.replace(/_/g, ' ');

        const data = {
            state: value,
            attributes: {
                unit_of_measurement: getUnitForStat(statName),
                friendly_name: `${deviceInfo.name} ${displayStatName}`,
                icon: getIconForStat(statName),

                // Not working, HA doesn't recognize it
                unique_id: uniqueId
            }
        };

        try {
            log(`Updating data for ${entityId}`, true);
            await sendToHA(entityId, data, config);
        } catch (error) {
            hasError = true;
            log(`Failed to send data for ${entityId}`);
        }
    }

    return !hasError;
}

// Remove an entity
async function removeEntity(entityId, config) {
    const url = new URL(`${config.hass_url}/api/states/${entityId}`);

    try {
        // First check if entity exists
        const checkResponse = await fetch(url, {
            method: 'DELETE',
            headers: {
                'Authorization': `Bearer ${config.hass_token}`,
                'Content-Type': 'application/json'
            }
        });

        // Skip if entity does not exist
        if (!checkResponse.ok && checkResponse.status !== 404) {
            log(`Failed to delete entity ${entityId}: ${checkResponse.statusText}`);

            throw new Error(`HTTP Error: ${checkResponse.status}`);
        }

        log(`Successfully removed entity: ${entityId}`, true);
        return true;
    } catch (error) {
        log(`Failed to remove entity ${entityId}: ${error.message}`, true);
        return false;
    }
}

// Remove all entities created by this tracker
async function removeAllEntities(config) {
    log('Starting to remove all entities...');

    let success = true;

    const deviceInfo = getDeviceInfo();
    const stats = await getSystemStats();

    // Remove each entity
    for (const statName of Object.keys(stats)) {
        const entityId = `sensor.${deviceInfo.id}_${statName}`;
        const result = await removeEntity(entityId, config);
        if (!result) {
            success = false;
        }
    }

    if (success) {
        log('All entities have been successfully removed');
    } else {
        log('Some entities could not be removed, check the logs for details');
    }

    return success;
}

// Promisify readline.question
function promptQuestion(rl, question, defaultValue = '') {
  return new Promise((resolve) => {
    rl.question(`${question}${defaultValue ? ` [${defaultValue}]` : ''}: `, (answer) => {
      resolve(answer.trim() || defaultValue);
    });
  });
}

// All commands
const COMMANDS = {
  version: {
    description: 'Display version information',
    execute: async () => {
      console.log(`HA Stats Tracker: v${VERSION}`);
    }
  },
  help: {
    description: 'Display this help information',
    execute: async () => {
        console.log(`
HA Stats Tracker v${VERSION}

Usage: ha-stats-tracker [command]

Available commands:
    help                 Display this help information
    setup                Interactive setup wizard to configure settings
    version              Display version information
    startup              Install and configure boot service
    remove_all_entities  Remove all entities created in Home Assistant

When run without arguments, the program starts in normal mode,
collecting system statistics and sending them to Home Assistant.
        `);
    }
  },
  setup: {
    description: 'Interactive setup wizard to configure settings',
    execute: async (config) => {
        const readline = require('readline');
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });

        console.log('\nHA Stats Tracker Setup\n');
        console.log('This wizard will help you configure the basic settings.\n');

        try {
            // 使用 promisify 函数简化代码
            const hass_url = await promptQuestion(rl, 'Home Assistant URL', config.hass_url);
            const hass_token = await promptQuestion(rl, 'Home Assistant Long-Lived Access Token');

            if (!hass_token) {
                console.log('Error: Home Assistant token is required.');
                process.exit(1);
            }

            // 保存配置
            const newConfig = {
                hass_url,
                hass_token,
                update_interval: config.update_interval,
                debug: config.debug
            };

            fs.writeFileSync(CONFIG_FILE, JSON.stringify(newConfig, null, 2));
            console.log(`\nConfiguration saved to ${CONFIG_FILE}`);
            console.log('\nYou can now run the tracker with:');
            console.log('  ./ha-stats-tracker');
            console.log('\nOr set it up to start on boot with:');
            console.log('  ./ha-stats-tracker startup');
        }
        catch (error) {
            console.log(`Error during setup: ${error.message}`);
            process.exit(1);
        }
        finally {
            rl.close();
        }
    }
  },
  startup: {
    description: 'Install and configure boot service',
    execute: async () => {
        log(`Installing startup service...`, true);

        // Create init.d script content
        const initScript = `#!/bin/sh /etc/rc.common

START=90
STOP=1
PROG=${path.join(__dirname, 'ha-stats-tracker')}

start_service() {
    procd_open_instance
    procd_set_param command "$PROG"
    procd_set_param stdout 1
    procd_set_param stderr 1
    procd_set_param respawn
    procd_set_param term_timeout 300
    procd_close_instance
}
        `;

        try {
            // Write the init.d script
            fs.writeFileSync('/etc/init.d/ha-stats-tracker', initScript, {
                mode: 0o755
            });
            log('Init.d script created successfully', true);

            // Enable the service
            exec('/etc/init.d/ha-stats-tracker enable', (error) => {
                if (error) {
                    log(`Failed to enable service: ${error.message}`, true);
                    process.exit(1);
                }

                log('Service enabled successfully, will start on next boot', true);
                process.exit(0);
            });
        } catch (error) {
            log(`Failed to create init.d script: ${error.message}`, true);
            process.exit(1);
        }

        // Restart the service
        log('Restarting service...', true);
        exec('/etc/init.d/ha-stats-tracker restart', (error) => {
            if (error) {
                log(`Failed to restart service: ${error.message}`, true);
                process.exit(1);
            }

            log('Service restarted successfully', true);
            process.exit(0);
        });
    }
  },
  remove_all_entities: {
    description: 'Remove all entities created in Home Assistant',
    execute: async (config) => {
        await removeAllEntities(config);
    }
  },
  startTracker: {
    description: 'Start the tracker in normal mode',
    sendStatsToHA: async (config, deviceInfo) => {
        const stats = await getSystemStats();
        const sentStatus = await sendSystemStats(deviceInfo, stats, config)

        return sentStatus;
    },
    updateStatus: {
        errorCount: 0,
        lastUpdate: 0
    },
    autoCheck: async (config, deviceInfo) => {
        const updateStatus = this.updateStatus;
        const now = Math.floor(Date.now() / 1000);

        if (now - updateStatus.lastUpdate >= config.update_interval) {
            try {
                await this.sendStatsToHA(config, deviceInfo);

                // Update last update time
                updateStatus.lastUpdate = now;

                // Reset error count
                updateStatus.errorCount = 0;
            }
            catch (error) {
                log(`Update Home Assistant stats error: ${error.message}`);
                updateStatus.errorCount++;
            }
        }

        // If there are errors, increase the delay
        delay = config.update_interval * Math.max(1, updateStatus.errorCount);
        await new Promise(resolve => setTimeout(resolve, delay * 1000));

        // Next auto check
        this.autoCheck(config, deviceInfo);
    },
    execute: async (config) => {
        log(`Starting HA Stats Tracker v${VERSION}`);

        const deviceInfo = getDeviceInfo();

        // Update version entity
        await updateVersionEntity(deviceInfo, config);

        // Handle process termination signals
        process.on('SIGTERM', () => {
            log('Stopping...');
            process.exit(0);
        });
        process.on('SIGINT', () => {
            log('Stopping...');
            process.exit(0);
        });

        // Start auto check
        this.autoCheck(config, deviceInfo);
    }
  }
}

// Main function
async function main() {
    // Check for command line arguments
    const args = process.argv.slice(2);
    const command = String(args[0] || '').trim();

    // Load configuration
    const config = getConfig();

    global.DEBUG = config.debug;

    // Check if command exists
    if (command && !COMMANDS[command]) {
        // Show help if command doesn't exist
        COMMANDS.help.execute();
        process.exit(1);
    }

    // Execute command
    if (command) {
        await COMMANDS[command].execute(config);
    }
    else {
        // Start the tracker in normal mode
        await COMMANDS.startTracker.execute(config);
    }
}

main().catch(error => {
    log(`Error: ${error.message}`);
    process.exit(1);
});
